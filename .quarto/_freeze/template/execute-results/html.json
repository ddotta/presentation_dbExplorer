{
  "hash": "012a536e24c6e955efedf4902c932942",
  "result": {
    "markdown": "---\ntitle: \"Le format Parquet\"\nsubtitle: \"Un nouveau format pour les données\"\ndate: today\ndate-format: \"DD/MM/YYYY\"\nauthor: \"SSP/DEMESIS/BQIS/PAOS\"\ndescription: |\n  Présentation du format Parquet au GUR de mars 2024\n\nslide-tone: false # for blind readers\nchalkboard: false # press the B key to toggle chalkboard\ntransition: slide\nfig-cap-location: bottom\nself-contained: true\n\ntoc: true\ntoc-title: Sommaire\ntoc-depth: 1\ntoc-float: true\n\n# multiplex: true\nexecute:\n  echo: false\n  warning: false\n  cache: false\neditor:\n  render-on-save: true\n---\n\n\n# Pourquoi Parquet ? {.backgroundTitre}\n\n## C'est quoi le format Parquet ?\n    \n- Un nouveau format de données ...\n\n  - ... qui compresse efficacement les fichiers\n  - ... inter-opérable\n  - conçu pour que les données soient chargées rapidement en mémoire\n\n## Caractéristiques du format Parquet\n\n- Un stockage au format binaire (pas lisible par un humain)\n- Un stockage orienté colonne (par opposition aux csv qui sont orientés lignes)\n- Un fichier Parquet contient à la fois les données et des métadonnées\n\n## Avantages du format Parquet\n\n- Des fichiers moins volumineux qu'en csv  \n  500 Mo en Parquet vs 5 Go en csv\n  \n- Des requêtes plus rapides et efficaces\nSeulement les données nécessaires sont lues, pas tout le fichier\n\n- Des données conformes à la mise à disposition par le producteur\n(par exemple, plus de problème de codes communes...)\n\n=> Un format très efficace pour l'analyse de données mais peu adapté à l'ajout\nde données en continu ou à la modification fréquente de données existantes.\n\n## Un format qui se démocratise\n\n- L'Insee diffuse des données du [recensement de la population](https://www.insee.fr/fr/statistiques/7637890#consulter-sommaire) au format Parquet \n\n- Voir [le guide d'utilisation joint](https://ssphub.netlify.app/post/parquetrp/) pour manipuler ces données\n\n- Premières diffusions sur data.gouv avec les bureaux de vote, les demandes de valeurs foncières, indicateurs pénaux...)\n\n- Prévisualisations des fichiers Parquet possibles avec le nouvel explorateur de données du SSP Cloud ou avec avec l'outil [ParquetViewer](https://github.com/mukunku/ParquetViewer).\n\n\n# Écrire des fichiers Parquet\n\n## Données peu volumineuses: écrire un seul fichier Parquet\n\nPour écrire des fichiers Parquet uniques, on utilise la fonction `write_parquet()` du package `arroW`.\n\n\n::: {.cell}\n\n:::\n\n\n\n## Données volumineuses: écrire un fichier Parquet partitionné\n\n## Industrialiser la conversion de vos fichiers ?\n \n# Lire et exploiter un fichier Parquet\n\n## Données peu volumineuses\n\n## Données volumineuses\n\n# Lire et exploiter un fichier Parquet partitionné\n\n## Pourquoi partitionner ?\n\n## Comment bien utiliser des fichiers partitionnés ?",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"template_files/libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"template_files/libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}