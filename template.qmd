---
title: "Le package dbExplorer"
subtitle: "Un outil Shiny pour explorer les bases de données et les tables parquet"
date: today
date-format: "DD/MM/YYYY"
author: "SSP/DEMESIS/BQIS/PAOS"
description: |
  Présentation du package dbExplorer au GUR du 30 juin 2025

slide-tone: false # for blind readers
chalkboard: false # press the B key to toggle chalkboard
transition: slide
fig-cap-location: bottom
self-contained: true

toc: true
toc-title: Sommaire
toc-depth: 1
toc-float: true

# multiplex: true
execute:
  echo: false
  warning: false
  cache: false
editor:
  render-on-save: true
---

## A quoi sert le package dbExplorer ?

Un package R qui lance une application Shiny qui a **plusieurs objectifs :**

- Explorer rapidement les données présentes dans une base de données
- Explorer rapidement le contenu des tables au format Parquet sur Cerise
- Faire des manipulations de 1er niveau sur ces données

=> Un package développé et maintenu par Adam Marsal du SSM Justice.

  
## Installation du package depuis Cerise


```{.r}
# install.packages("remotes")
remotes::install_git("https://gitlab.forge.agriculture.rie.gouv.fr/ssp/bmis/packages/dbexplorer",
                     dependencies = T,
                     git = "external")
```

Comme n'importe quel autre package R, `{dbExplorer}` doit être chargé avec :


```{.r}
library(dbExplorer)
```

Avant d'explorer ce package, **2 concepts théoriques sont nécessaires**.

## Les "Background jobs" de RStudio

Les "Background Jobs" dans RStudio sont une fonctionnalité qui permet **d’exécuter des scripts R en arrière-plan** sans bloquer l’interface principale de RStudio. 

![](img/Background_jobs.png){fig-align="center"} <br>
**Quelques caractéristiques** :  

- **Une exécution indépendante** : le job s'exécute dans un processus séparé de la session principale (non bloquant).  
- **Suivi de l'exécution** : une fenêtre dédiée dans RStudio qui permet de consulter la progression, les messages et l'état du job (traçabilité).
- **Une reproductibilité garantie** : les jobs relancent le script tel qu'il est au moment de l'appel dans un environnement propre. Le job s'exécute de manière isolé sans polluer l'environnement global.

## Exemple de Background jobs (1/3)

Soit le script simple suivant :  

```{.r}
library(dplyr)

Sys.sleep(5)
tab_agregee <- iris |> 
  summarise(Moy_pet_long = mean(Petal.Length, na.rm = TRUE), .by = Species)
Sys.sleep(5)

print("Pgm terminé")
```
<br>

Ce script peut être lancé via un background job en cliquant sur le bouton `"Start Background job"`.    

## Exemple de Background jobs (2/3)

La fenêtre suivante s'affiche :  

![](img/fenetre_background_jobs.png){fig-align="center"}


## Exemple de Background jobs (3/3)

En fonction des choix effectués au lancement du background job, les résultats seront (ou pas) disponibles dans l'environnement global de la session R.  

![](img/Env_background_jobs.png){fig-align="center"}

Si vous avez choisi de stocker les résultats dans un objet "results", voici comment y accéder :  

![](img/get_env_background_jobs.png){fig-align="center"}

## Structure d'une base de données relationnelles

Les bases de données relationnelles sont structurées **de manière hiérarchique et logique**.  

- **La Base de donnée (BDD)** : c'est l'entité principale qui contient l'ensemble des données
- **Le schéma** : c'est une structure logique à l'intérieur d'une BDD. Il sert à organiser les objets. Il peut être vu comme un *dossier* dans la BDD
- **Les tables** : ce sont les éléments centraux où les données sont stockées
- **Les vues** : ce sont des représentations virtuelles de tables (créées au moment des requêtes)

Exemple de structure :  

```
Base de données : vente_en_ligne
│
├── Schéma : public
│   ├── Table : clients
│   ├── Table : commandes
│   └── Table : produits
│
└── Schéma : archive
    └── Table : commandes_2020
```

## Se connecter à une BDD sans dbExplorer (1/3)

Exemple avec BDD PostgreSQL :  

```{.r}
library(connections)
library(RPostgres)

### Chargement des infos de connection
infos_connection_prod <- read_delim("infos_connection.csv", 
                                    delim = ";", escape_double = FALSE, trim_ws = TRUE,
                                    show_col_types = FALSE) %>% 
  filter(ENV == "PROD")

### Connexion à la BDD
con <- connection_open(
    Postgres(), 
    user = infos_connection_prod[["USER"]],
    password = rawToChar(openssl::base64_decode(infos_connection_prod[["PWD"]])),
    host = infos_connection_prod[["DB_URL"]], 
    dbname = infos_connection_prod[["DATABASE"]],
    port = infos_connection_prod[["PORT"]])
```



## Se connecter à une BDD sans dbExplorer (2/3)

=> La structure de la BDD est visible dans l'onglet `"Connections"` de RStudio :  

![](img/balsaV2.png){fig-align="center"}

## Se connecter à une BDD sans dbExplorer (3/3)

![](img/balsaV2_onglet_connections.png){fig-align="center"}
<br>
![](img/balsaV2_affichage_table.png){fig-align="center"}


## Explorer une base de données PostgreSQL (1/N)

```{.r}
## Installation du package 
remotes::install_git("https://gitlab.forge.agriculture.rie.gouv.fr/ssp/bmis/packages/dbexplorer",
                     dependencies = T,
                     git = "external")
```

```{.r}
## Création du fichier de connexion à postgre SQL 
connector_file <- "./R/dbExplorer-connector/dbExplorerPgConnector.R"
dbExplorer:::createPostgreSQLConnector(host = "postgresql-164525.projet-sortie-sas",
                                       dbname = "dvf",
                                       port = 5432,
                                       file=connector_file)
```

<br>

```{.r}
## Lancement de l'application sur ce fichier de connexion. 
ExplorerDonnees(connectorFile = connector_file)
```

<br>

=> **Un "background job"** se lance dans RStudio et **une application shiny** s'ouvre dans le navigateur.

## Explorer une base de données PostgreSQL (2/N)

Entrer le login & mot de passe d'accès à la BDD :  

![](img/identification_dbExplorer.png){fig-align="center"}

## Explorer une base de données PostgreSQL (3/N)

![](img/image_explorateur_bdd.png){fig-align="center"}

## Démonstration 

<br>
<br>
<br>
<br>

Démo sur Cerise ! (voir rép. `dbExplorer_test`)

## Quelques raccourcis/astuces utiles !

- Maintenir la touche "Tab" enfoncée pour **sélectionner les colonnes interactivement**  
- Pour filtrer les lignes, cocher la case "Cliquer pour filtrer" puis :  
    - Cliquer une fois pour appliquer le filtre sur les lignes de la table
    - Cliquer deux fois pour appliquer la négation du filtre sur les lignes de la table
- **Pour télécharger les jeux de données** au format csv, cliquer en haut à droite sur le bouton **"télécharger"** ou faire **Ctrl + S**.

## Création de fichiers parquet à partir d'une BDD (1/2)

```{.r}
### Connexion à la BDD
con <- connection_open(
    Postgres(), 
    user = infos_connection_prod[["USER"]],
    password = rawToChar(openssl::base64_decode(infos_connection_prod[["PWD"]])),
    host = infos_connection_prod[["DB_URL"]], 
    dbname = infos_connection_prod[["DATABASE"]],
    port = infos_connection_prod[["PORT"]])
```

Appel de la fonction `exportPgToParquet.R` :  

```{.r}
source("R/exportPgToParquet.R")
```

## Création de fichiers parquet à partir d'une BDD (2/2)

```{.r}
# Export de la table categorie_juridique
exportPgToParquet(con,"categorie_juridique")
# Export de la table entite_surface
exportPgToParquet(con,"entite_surface")
```
<br>

![](img/export_parquet.png){fig-align="center"}
<br>
![](img/export_parquet_explorateur.png){fig-align="center"}

## Explorer une base de données SQLite

```{.r}
library(RSQLite)
connector_file <- "R/dbExplorer-connector/connector_sqlite.R"
dbExplorer::ExplorerDonnees(connectorFile = "R/dbExplorer-connector/connector_sqlite.R")
```
<br>

![](img/explorateur_sqlite.png){fig-align="center"}

## Explorer des fichiers parquets

```{.r}
dbExplorer::ExplorerDossiers("~/CERISE/03-Espace-de-Diffusion/030_Structures_exploitations/3020_Recensements/RA_2010/")
```

![](img/explorateur_dossier.png){fig-align="center"}

## Quelques compléments sur les manipulations de BDD avec R (1/2)

Prenons une base SQLite :

```{.r}
library(RSQLite)

## Connexion à la BDD
chemin_IPPAP_dev <- "~/CERISE/02-Espace-de-Production/090_Prix/9010_IPPAP/IPPAP_app/dev/App/donnees/IPPAP.sqlite"
db_IPPAP <- dbConnect(RSQLite::SQLite(), dbname = chemin_IPPAP_dev)
```

<br>

Quelques manipulations possibles avec des fonctions R :  

```{.r}
## Pour afficher la liste des tables de la base de donnees
dbListTables(db_IPPAP)

> [1] "COEFF_RACCORDEMENT"   "DATES"                "NOMENCLATURE_BDC"    
[4] "POND_MOIS_COMPOSANTS" "PRIX"                 "QUANTITES"           
[7] "REFERENTIEL_IPPAP"    "VIVANTES"  
```

## Quelques compléments sur les manipulations de BDD avec R (2/2)

```{.r}
## Pour afficher les colonnes d'une table
dbListFields(db_IPPAP,"PRIX")
> [1] "CODE_S"     "2019-01-01" "2019-02-01" "2019-03-01" "2019-04-01" "2019-05-01"
  [7] "2019-06-01" "2019-07-01" "2019-08-01" "2019-09-01" "2019-10-01" "2019-11-01"
 [13] "2019-12-01" "2020-01-01" "2020-02-01" "2020-03-01" "2020-04-01" "2020-05-01"
 [19] "2020-06-01" "2020-07-01" "2020-08-01" "2020-09-01" "2020-10-01" "2020-11-01"
 ...
```

<br>

```{.r}
## Pour lire une table
verif_PRIX <- dbReadTable(db_IPPAP,"PRIX")
head(verif_PRIX)[,1:5]
    CODE_S  2019.01.01  2019.02.01  2019.03.01  2019.04.01
1 10100046       1.839       1.794       1.700       1.729
2  1120057          NA          NA       0.606       0.516
3  1140001          NA          NA          NA          NA
4  1150001          NA          NA          NA          NA
5  1210057          NA          NA       0.555       0.488
6 12120104          NA          NA          NA          NA
```


## Aperçu du package {dm}


Installation et chargement :  

```{.r}
install.packages('dm')

```

## Pour en savoir plus

- [Package dm](https://dm.cynkra.com/)
- [Fiche utilitr](https://book.utilitr.org/03_Fiches_thematiques/Fiche_connexion_bdd.html) sur l'utilisation des bases de données avec R.